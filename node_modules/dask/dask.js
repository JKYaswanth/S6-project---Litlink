(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.dask = f()}})(function(){var define,module,exports;return (function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Deferred {
    constructor() {
        this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
    }
}
async function get(dsk, result /* | string[]*/, funcs) {
    const cache = {};
    return await _get(dsk, result, cache, funcs);
}
exports.get = get;
exports.default = get;
async function _get(dsk, result /* | string[]*/, cache, funcs) {
    if (!(result in dsk)) {
        return result;
    }
    const v = dsk[result];
    // console.log('dask-pending:', result);
    if (v == result) {
        // console.log('dask-resolved', result, '=', v);
        return v;
    }
    if (result in cache) {
        return cache[result].promise;
    }
    const deferred = new Deferred();
    cache[result] = deferred;
    if (typeof v === 'object') {
        const keys = Object.keys(v);
        if (keys.length == 1) {
            const fun_name = keys[0];
            const fun = funcs[fun_name];
            if (typeof fun === 'function') {
                const args = (v[fun_name] || []);
                // console.log('dask-calling fun=', fun_name);
                const val = await fun.apply(null, await Promise.all(args.map((arg) => {
                    return _get(dsk, arg, cache, funcs);
                })));
                // console.log('dask-resolved fun=', fun_name, result, '=', val);
                deferred.resolve(val);
                return val;
            }
        }
    }
    else {
        if (typeof v === 'string') {
            const d = dsk[v];
            if (d) {
                const val = await _get(dsk, v, cache, funcs);
                // console.log('dask-resolved', result, '=', val);
                deferred.resolve(val);
                return val;
            }
        }
    }
    // console.log('dask-resolved', result, '=', v);
    deferred.resolve(v);
    return v;
}

},{}]},{},[1])(1)
});
